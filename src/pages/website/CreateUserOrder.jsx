import { Form, Input, Select } from "antd";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, Redirect } from "react-router-dom";
import { toast } from "react-toastify";
import { baseUrl, CountryData, DateTime, EmjsF, objectOnly, objectRemove, object_entries, Post, toCapitalize } from "../../applocal";
import LoadingAnim from "../../components/LoadingAnim";
import { clearCartItem, setPayment } from "../../redux/actions";
import { setCustomer, clearCustomer } from "../../redux/actions/auth";
import APP_USER from "../../services/APP_USER";
import orderService from "../../services/orders";
import PaymentAPI from "../../services/PaymentAPI";
import Body from "./Body";
import cardDateFormat from "./component/CardDateFormat";
import { totalCoursePackage, totalPrice } from "./customer/CheckOut";

export default function CreateUserOrder() {
  const [userRes, setuserRes] = useState(false);
  const [accountName, setAccountName] = useState("");
  const [userResDone, setuserResDone] = useState(false);

  const [initialValues, setInitialValues] = useState({
    card_name: "",
    card_number: "",
    card_date: "",
    card_cvc: "",
    card_country: "JO",
    card_postcode: "",
  });
  const [form] = Form.useForm();

  const dsPact = useDispatch();
  const { carts, payment } = useSelector((s) => s.globals);
  const { customer: user, userRl } = useSelector((s) => s.auth);

  const cartsData = object_entries(carts);
  const len = cartsData.length > 0;

  const [OrderProcessing, setOrderProcessing] = useState(false);
  const [paymentReqDone, setpaymentReqDone] = useState(false);

  const dispatch = useDispatch();
  const courseTotalPrice = totalPrice(cartsData);

  function processOrder({ card, orderId: orderID }) {
    setOrderProcessing(true);
    // setAccountName(data_.fname + " " + data_.lname);
    const data = {
      ...objectOnly(user, ["phone", "email", "address", "country", "city"]),
      customerType: APP_USER.customer,
      name: user?.name || card?.card_name,
      address1: user?.address,
      address2: "",
      courseID: "",
      orderID,
      startDate: DateTime().now(),
      endDate: "",
      subscriptionTier: "Credit Card",
      total: courseTotalPrice(),
      userId: user?._id,
      courses: totalCoursePackage(cartsData),
    };

    orderService
      .add(data)
      .then(({ data }) => {
        dispatch(clearCartItem());
        dispatch(clearCustomer());
        window.location.replace(baseUrl("#/login?urlto=myCourses"));
      })
      .finally(() => {
        setOrderProcessing(false);
      });
  }

  if (!len) {
    return <Redirect to={"#"} />;
  }

  const addPayment = (v) => {
    if (!userResDone) {
      toast.error("Oops! User account have not been created.");
    }
    setpaymentReqDone(true);
    const dt = {
      orderAmount: courseTotalPrice(),
      orderCurrency: "jod",
      "card-number": v.card_number,
      "expiry-month": v.card_date,
      "expiry-year": v.card_date,
      "security-code": v.card_cvc,
    };

    PaymentAPI.makePayment(dt)
      .then(({ data }) => {
        processOrder({ card: v, orderId: data?.orderId });
        dispatch(setPayment(data));
      })
      .finally(() => {
        setpaymentReqDone(false);
      });
  };

  const showIndicator = paymentReqDone || OrderProcessing;

  function handleUserAccount(data_) {
    setuserRes(true);
    setAccountName(data_.fname + " " + data_.lname);
    const data = objectRemove(
      {
        ...data_,
        phone: data_.phone_code + "" + data_.phone,
      },
      ["phone_code", "confirm_password"]
    );
    Post({ url: "users/add", data, dataType: "json" })
      .then(({ data: { data } }) => {
        dsPact(setCustomer(data));
        setuserResDone(true);
      })
      .finally(() => {
        setuserRes(false);
      });
  }

  if (!len) {
    return <Redirect to={"#"} />;
  }
  let _v = "";

  function onExDate(e) {
    cardDateFormat(form)(e);
  }

  return (
    <Body>
      <div>
        <div className="row">
          <div className="col-8">
            <div>
              <h3 className="fw-bold p-3  fz-3">Customer Information</h3>
              {!userResDone ? (
                <Form initialValues={{ fname: "" }} name="wrap" className="w-100 p-3 pr-5" labelCol={{ flex: "130px" }} labelAlign="left" labelWrap wrapperCol={{ flex: 1 }} colon={false} layout="horizontal" onFinish={handleUserAccount} /* initialValues={data} onValuesChange={_handleChange}*/>
                  <div className="row">
                    <div className="col-6 p-0">
                      <Form.Item name="fname" rules={[{ required: true }]}>
                        <Input hasFeedback type="text" placeholder="First Name" className="w-100 .rad_10" />
                      </Form.Item>
                    </div>
                    <div className="col-6 p-0">
                      <Form.Item name="lname" rules={[{ required: true }]}>
                        <Input hasFeedback type="text" placeholder="Last Name" className="w-100 .rad_10" />
                      </Form.Item>
                    </div>
                  </div>
                  <Form.Item name="email" rules={[{ required: true }]}>
                    <Input hasFeedback type="email" placeholder="Email" className="w-100 .rad_10" />
                  </Form.Item>
                  <Form.Item name="password" rules={[{ required: true }]}>
                    <Input hasFeedback type="password" placeholder="Password(6 digits at least, case sensitive)" className="w-100 .rad_10" />
                  </Form.Item>
                  <Form.Item
                    name="confirm_password"
                    //   dependencies={["password"]}
                    hasFeedback
                    rules={[
                      {
                        required: true,
                        message: "Please confirm your password!",
                      },
                      ({ getFieldValue }) => ({
                        validator(_, value) {
                          if (!value || getFieldValue("password") === value) {
                            return Promise.resolve();
                          }
                          return Promise.reject(new Error("The two passwords that you entered do not match!"));
                        },
                      }),
                    ]}
                  >
                    <Input type="password" placeholder="Comfirm password" className="w-100 .rad_10" />
                  </Form.Item>
                  <div className="row">
                    <div className="col-2 p-0">
                      <Form.Item hasFeedback name="phone_code" rules={[{ required: true, message: "'Country Phone Code' is required" }]}>
                        <Select
                          //
                          showSearch
                          optionFilterProp="children"
                          filterOption={(input, option) => {
                            const childrenValue = String(option?.props?.children).toLowerCase().trim();
                            return childrenValue.includes(input);
                          }}
                          className=""
                          placeholder="+962"
                        >
                          {/* {[...Array(5)].map((item, i) => ( */}
                          {CountryData.map((item, i) => (
                            <Select.Option key={i} value={item.dial_code}>
                              {item.code} {item.dial_code}
                            </Select.Option>
                          ))}
                        </Select>
                      </Form.Item>
                    </div>

                    <div className="col-10 p-0">
                      <Form.Item hasFeedback name="phone" rules={[{ required: true }]}>
                        <Input type="text" placeholder="Phone" className="w-100 .rad_10" />
                      </Form.Item>
                    </div>
                  </div>

                  <div className="row">
                    <div className="col-4 p-0">
                      <button disabled={userRes} type="submit" className="mr-3 btn w-100 bg-primary outline-border bg-white.">
                        {userRes ? "Creating... Account" : "Create Account"}
                      </button>
                    </div>
                    <div className="text-right">
                      <Link to={"/login"}>Existing Account</Link>
                    </div>
                  </div>
                </Form>
              ) : (
                <div className="alert alert-success">
                  An account has been created for <strong>{toCapitalize(accountName)}!</strong> was successful
                  <br />
                  You can now continue with your course order purchase!
                </div>
              )}
            </div>
            <div className="resize-400 m-0 mt-3 p-relative">
              <h3 className="fw-bold p-3  fz-3">Payment Information</h3>
              {!userResDone && (
                <div className="d-flex align-items-center text-center pointer-event p-absolute p-top-0 p-bottom-0 p-left-0 p-right-0" style={{ zIndex: 10, backgroundColor: "rgba(250,250,250,0.5)" }}>
                  <p className="text-danger fz-1-5 p-3" style={{ backgroundColor: "#fcfcfc" }}>
                    You need to first create an Account before proceeding to this part
                  </p>
                </div>
              )}
              <Form
                form={form}
                initialValues={initialValues}
                onFinish={addPayment}
                // onValuesChange={addPayment}
                className="w-100 p-3 pr-5 p-relative"
                labelCol={{ flex: "130px" }}
                labelAlign="left"
                labelWrap
                wrapperCol={{ flex: 1 }}
                // colon={false}
                layout="horizontal"
                // /* onValuesChange={_handleChange}*
              >
                {showIndicator && (
                  <div className="row align-items-center text-center pointer-event p-absolute p-top-0 p-bottom-0 p-left-0 p-right-0" style={{ zIndex: 10, backgroundColor: "rgba(250,250,250,0.5)" }}>
                    <div className="col-12">
                      <LoadingAnim
                        children={
                          <p className="text-info fz-1-5 p-3" style={{ backgroundColor: "#fcfcfc" }}>
                            Processing order payment...
                          </p>
                        }
                      />
                    </div>
                  </div>
                )}
                <p className="fz-sm..fw-bold p-0 m-0">Card Holder Name</p>
                <Form.Item label="" name="card_name" rules={[{ required: true }]}>
                  <Input type="text" placeholder="Mohammad Terry" className="w-100 .rad_10" />
                </Form.Item>
                <label htmlFor="fz-sm fw-bold">Card Number</label>
                <Form.Item name="card_number" rules={[{ required: true, min: 6 }]}>
                  <div className="p-relative">
                    <Input type="number" style={{ paddingRight: 108 }} placeholder="1234 1234 1234 1234" className="w-100 .rad_10" />
                    <div className="p-absolute  pr-2 pt-1 p-top-0 p-right-0">
                      <svg width="108" height="17" viewBox="0 0 108 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M21.75 0.75H2.25C1.14543 0.75 0.25 1.64543 0.25 2.75V14.25C0.25 15.3546 1.14543 16.25 2.25 16.25H21.75C22.8546 16.25 23.75 15.3546 23.75 14.25V2.75C23.75 1.64543 22.8546 0.75 21.75 0.75Z" fill="white" stroke="black" stroke-opacity="0.2" stroke-width="0.5" />
                        <path
                          d="M2.78773 6.41444C2.26459 6.12751 1.66754 5.89674 1 5.73659L1.028 5.61188H3.76498C4.13596 5.62489 4.43699 5.73651 4.53495 6.13071L5.12977 8.96659L5.31198 9.82073L6.97797 5.61188H8.77679L6.10288 11.7775H4.30397L2.78773 6.41444ZM10.1 11.7841H8.39883L9.46285 5.61188H11.1639L10.1 11.7841ZM16.2668 5.76277L16.0354 7.09559L15.8816 7.03004C15.5737 6.90525 15.1674 6.78054 14.6144 6.79371C13.9427 6.79371 13.6415 7.06277 13.6345 7.32546C13.6345 7.61441 13.9989 7.80484 14.5939 8.08725C15.574 8.52719 16.0286 9.06557 16.0218 9.76819C16.0081 11.0486 14.846 11.8761 13.0611 11.8761C12.2979 11.8694 11.5628 11.7181 11.1638 11.5476L11.4019 10.162L11.6259 10.2607C12.1789 10.4907 12.5428 10.589 13.222 10.589C13.7118 10.589 14.2369 10.3984 14.2436 9.98488C14.2436 9.71565 14.0199 9.51851 13.3617 9.21646C12.7178 8.92087 11.8568 8.42848 11.8708 7.54198C11.8781 6.34042 13.0611 5.5 14.741 5.5C15.399 5.5 15.9312 5.63789 16.2668 5.76277ZM18.5278 9.59749H19.9417C19.8718 9.28889 19.5496 7.81147 19.5496 7.81147L19.4307 7.27964C19.3467 7.50943 19.1999 7.88373 19.2069 7.87056C19.2069 7.87056 18.6678 9.2429 18.5278 9.59749ZM20.6276 5.61188L22 11.784H20.4249C20.4249 11.784 20.2708 11.0748 20.2219 10.8581H18.0378C17.9746 11.0222 17.6808 11.784 17.6808 11.784H15.8958L18.4226 6.12399C18.5977 5.72342 18.906 5.61188 19.3118 5.61188H20.6276Z"
                          fill="#171E6C"
                        />
                        <path d="M50 0.5H30C28.8954 0.5 28 1.39543 28 2.5V14.5C28 15.6046 28.8954 16.5 30 16.5H50C51.1046 16.5 52 15.6046 52 14.5V2.5C52 1.39543 51.1046 0.5 50 0.5Z" fill="#252525" />
                        <path d="M37 13.5C39.7614 13.5 42 11.2614 42 8.5C42 5.73858 39.7614 3.5 37 3.5C34.2386 3.5 32 5.73858 32 8.5C32 11.2614 34.2386 13.5 37 13.5Z" fill="#EB001B" />
                        <path d="M43 13.5C45.7614 13.5 48 11.2614 48 8.5C48 5.73858 45.7614 3.5 43 3.5C40.2386 3.5 38 5.73858 38 8.5C38 11.2614 40.2386 13.5 43 13.5Z" fill="#F79E1B" />
                        <path d="M78 0.5H58C56.8954 0.5 56 1.39543 56 2.5V14.5C56 15.6046 56.8954 16.5 58 16.5H78C79.1046 16.5 80 15.6046 80 14.5V2.5C80 1.39543 79.1046 0.5 78 0.5Z" fill="#016FD0" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M74.1954 13.2689L76.2827 11.0419L74.1953 8.82007H75.811L77.0865 10.2301L78.3656 8.82007H79.9117V8.85507L77.8689 11.0419L79.9117 13.2057V13.2689H78.35L77.0519 11.8447L75.7671 13.2689H74.1954Z" fill="#016FD0" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M70.2374 3.13184H72.6834L73.5426 5.08269V3.13184H76.5624L77.0832 4.59341L77.6057 3.13184H79.9116V8.83323H67.7251L70.2374 3.13184Z" fill="#FFFFFE" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M70.7006 3.75146L68.7266 8.19664H70.0805L70.4529 7.30647H72.4708L72.843 8.19664H74.2306L72.2648 3.75146H70.7006ZM70.8702 6.3089L71.4622 4.89383L72.0538 6.3089H70.8702Z" fill="#016FD0" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M74.2119 8.19582V3.75073L76.115 3.75727L77.0943 6.49L78.0799 3.75073H79.9115V8.19582L78.7329 8.20625V5.1529L77.6204 8.19582H76.5446L75.4089 5.14247V8.19582H74.2119Z" fill="#016FD0" />
                        <path
                          d="M105.997 16.2499L105.999 16.2499C106.954 16.2581 107.738 15.4773 107.75 14.5042L107.75 2.5063C107.746 2.03569 107.559 1.58617 107.23 1.2568C106.901 0.928269 106.459 0.746149 105.997 0.750071L86.0006 0.750062C85.5411 0.746149 85.0986 0.928269 84.7703 1.2568C84.4411 1.58617 84.2538 2.03569 84.25 2.50426L84.25 14.4937C84.2538 14.9643 84.4411 15.4138 84.7703 15.7432C85.0986 16.0717 85.5411 16.2538 86.0028 16.2499H105.997ZM105.996 16.7499C105.996 16.7499 105.995 16.7499 105.995 16.7499L105.997 16.7499H105.996Z"
                          fill="white"
                          stroke="black"
                          stroke-opacity="0.2"
                          stroke-width="0.5"
                        />
                        <path
                          d="M107.172 9.79643H106.32L105.36 8.53023H105.269V9.79643H104.574V6.65161H105.6C106.403 6.65161 106.866 6.98264 106.866 7.5785C106.866 8.06678 106.577 8.38126 106.055 8.48057L107.172 9.79643ZM106.146 7.60333C106.146 7.29712 105.915 7.13988 105.484 7.13988H105.269V8.09161H105.468C105.915 8.09161 106.146 7.92609 106.146 7.60333ZM102.141 6.65161H104.11V7.18126H102.836V7.88471H104.061V8.42264H102.836V9.27505H104.11V9.80471H102.141V6.65161ZM99.9063 9.87919L98.4001 6.64333H99.1614L100.113 8.76195L101.073 6.64333H101.818L100.295 9.87919H99.9228H99.9063ZM93.6083 9.87092C92.549 9.87092 91.7214 9.15092 91.7214 8.21574C91.7214 7.3054 92.5656 6.56885 93.6249 6.56885C93.9228 6.56885 94.1711 6.62678 94.4773 6.75919V7.48747C94.2454 7.25965 93.9334 7.13187 93.6083 7.13161C92.9463 7.13161 92.4414 7.61161 92.4414 8.21574C92.4414 8.85299 92.938 9.30816 93.6414 9.30816C93.9559 9.30816 94.1959 9.20885 94.4773 8.96057V9.68885C94.1628 9.82126 93.898 9.87092 93.6083 9.87092ZM91.5063 8.83643C91.5063 9.44885 91.0014 9.87092 90.2732 9.87092C89.7435 9.87092 89.3628 9.68885 89.0401 9.27505L89.4952 8.88609C89.6525 9.16747 89.9173 9.30816 90.2483 9.30816C90.5628 9.30816 90.7863 9.11781 90.7863 8.86954C90.7863 8.72885 90.7201 8.62126 90.5794 8.5385C90.4251 8.46365 90.2645 8.40271 90.0994 8.35643C89.4456 8.14954 89.2221 7.92609 89.2221 7.48747C89.2221 6.97436 89.7021 6.5854 90.3311 6.5854C90.7283 6.5854 91.0842 6.70954 91.3821 6.94126L91.018 7.35505C90.8737 7.19683 90.6694 7.10671 90.4552 7.10678C90.1573 7.10678 89.9421 7.25574 89.9421 7.45436C89.9421 7.61988 90.0663 7.71092 90.4801 7.85161C91.2745 8.09988 91.5063 8.33161 91.5063 8.84471V8.83643ZM88.0883 6.65161H88.7835V9.80471H88.0883V6.65161ZM85.8538 9.80471H84.8276V6.65161H85.8538C86.9794 6.65161 87.7573 7.29712 87.7573 8.22402C87.7573 8.69574 87.5256 9.14264 87.1201 9.44057C86.7725 9.68885 86.3835 9.80471 85.8456 9.80471H85.8538ZM86.6649 7.43781C86.4332 7.25574 86.1683 7.18954 85.7132 7.18954H85.5228V9.27505H85.7132C86.1601 9.27505 86.4414 9.1923 86.6649 9.02678C86.9049 8.82816 87.0456 8.53023 87.0456 8.22402C87.0456 7.91781 86.9049 7.62816 86.6649 7.43781Z"
                          fill="black"
                        />
                        <path d="M96.414 6.56885C95.5036 6.56885 94.7588 7.29712 94.7588 8.19919C94.7588 9.15919 95.4705 9.87919 96.414 9.87919C97.3409 9.87919 98.0691 9.15092 98.0691 8.22402C98.0691 7.29712 97.3491 6.56885 96.414 6.56885Z" fill="#F27712" />
                      </svg>
                    </div>
                  </div>
                </Form.Item>
                <div className="row">
                  <div className="col-6 p-0 pr-2">
                    <label className="fz-sm fw-bold">Expiry</label>
                    <Form.Item name="card_date" onKeyDown={onExDate} onChange={onExDate} rules={[{ required: true, type: "string", min: 5 }]}>
                      <Input type="text" pattern="[0-9]{2}/[0-9]{2}" placeholder="MM / YY" className="w-100 .rad_10" />
                    </Form.Item>
                  </div>
                  <div className="col-6 p-0 pl-2">
                    <label className="fz-sm fw-bold">CVC</label>
                    <Form.Item name="card_cvc" rules={[{ required: true, type: "string", min: 2 }]}>
                      {/* <input type="text" pattern="" /> */}
                      <Input type="text" pattern="[0-9]+" placeholder="CVC" className="w-100 .rad_10" />
                    </Form.Item>
                  </div>
                </div>
                <div className="row">
                  <div className="col-6 p-0 pr-2">
                    <label className="fz-sm fw-bold">Country</label>
                    <Form.Item name="card_country" rules={[{ required: true }]}>
                      <Select
                        showSearch
                        optionFilterProp="children"
                        // onSearch={(v) => console.log(v)}
                        filterOption={(input, option) => {
                          const childrenValue = String(option?.props?.children).toLowerCase().trim();
                          const value = String(option?.props?.value).toLowerCase().trim();
                          return childrenValue.startsWith(input);
                        }}
                        className=""
                        placeholder="Select"
                      >
                        {CountryData.map((item, i) => (
                          <Select.Option key={i} value={item.code}>
                            {item.name}
                          </Select.Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </div>
                  <div className="col-6 p-0 pl-2">
                    <label className="fz-sm fw-bold">Postal</label>
                    <Form.Item name="card_postcode" rules={[{ required: true }]}>
                      <Input type="text" placeholder="11953" className="w-100 .rad_10" />
                    </Form.Item>
                  </div>
                </div>
                <div className="row">
                  <div className="col-12 p-0">
                    <button type="submit" className="btn w-100 btn-success text-uppercase">
                      Buy Now
                    </button>
                  </div>
                </div>
              </Form>
            </div>
          </div>
          <div className="col-4">
            <div className="outline-shadow bg-white">
              <h3 className="fw-bold p-3  fz-3">Payment Information</h3>

              {cartsData.map((itm) => {
                const { course_pkg, course } = itm["1"];
                const {
                  duration,
                  price: { usd = "", jod = "" },
                } = EmjsF(course_pkg).parse();
                return <CourseLists title={course.name} date={duration.replace("_", " ")} amount={`$${usd} - ${jod} JOD`} />;
              })}
              <CourseLists col1={6} col2={6} title={"Total"} date={""} amount={`$${courseTotalPrice("usd")} - ${courseTotalPrice()} JOD`} />
            </div>
          </div>
        </div>
      </div>
    </Body>
  );
}

export function CourseLists({ col1 = 9, col2 = 3, title, date, amount }) {
  return (
    <div className="d-flex bd-dark-1 p-2 align-items-center">
      <div className={"col-" + col1}>
        <h4 className="fw-bold fz-1 m-0 mb-1 text-capitalize">{title}</h4>
        <p className="fz-sm">{date}</p>
      </div>
      <div className={`col-${col2} text-right`}>
        <p className="fz-sm">{amount}</p>
      </div>
    </div>
  );
}
{
  /*  <CourseLists
                title={"Available Addons"}
                date={
                  <svg width="182" height="32" viewBox="0 0 282 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.5 2C0.5 0.895431 1.39543 0 2.5 0H279.5C280.605 0 281.5 0.895431 281.5 2V30C281.5 31.1046 280.605 32 279.5 32H2.5C1.39543 32 0.5 31.1046 0.5 30V2Z" fill="white" />
                    <path d="M4.5 6C4.5 4.89543 5.39543 4 6.5 4H127.5C128.605 4 129.5 4.89543 129.5 6V26C129.5 27.1046 128.605 28 127.5 28H6.5C5.39543 28 4.5 27.1046 4.5 26V6Z" fill="#F5F5F5" />
                    <path
                      d="M14.6211 19.0801H18.6641V20H13.4902V11.4688H14.6211V19.0801ZM20.9551 20H19.8711V13.6602H20.9551V20ZM19.7832 11.9785C19.7832 11.8027 19.8359 11.6543 19.9414 11.5332C20.0508 11.4121 20.2109 11.3516 20.4219 11.3516C20.6328 11.3516 20.793 11.4121 20.9023 11.5332C21.0117 11.6543 21.0664 11.8027 21.0664 11.9785C21.0664 12.1543 21.0117 12.3008 20.9023 12.418C20.793 12.5352 20.6328 12.5938 20.4219 12.5938C20.2109 12.5938 20.0508 12.5352 19.9414 12.418C19.8359 12.3008 19.7832 12.1543 19.7832 11.9785ZM24.7871 18.5293L26.3574 13.6602H27.4648L25.1914 20H24.3652L22.0684 13.6602H23.1758L24.7871 18.5293ZM31.0566 20.1172C30.1973 20.1172 29.498 19.8359 28.959 19.2734C28.4199 18.707 28.1504 17.9512 28.1504 17.0059V16.8066C28.1504 16.1777 28.2695 15.6172 28.5078 15.125C28.75 14.6289 29.0859 14.2422 29.5156 13.9648C29.9492 13.6836 30.418 13.543 30.9219 13.543C31.7461 13.543 32.3867 13.8145 32.8438 14.3574C33.3008 14.9004 33.5293 15.6777 33.5293 16.6895V17.1406H29.2344C29.25 17.7656 29.4316 18.2715 29.7793 18.6582C30.1309 19.041 30.5762 19.2324 31.1152 19.2324C31.498 19.2324 31.8223 19.1543 32.0879 18.998C32.3535 18.8418 32.5859 18.6348 32.7852 18.377L33.4473 18.8926C32.916 19.709 32.1191 20.1172 31.0566 20.1172ZM30.9219 14.4336C30.4844 14.4336 30.1172 14.5938 29.8203 14.9141C29.5234 15.2305 29.3398 15.6758 29.2695 16.25H32.4453V16.168C32.4141 15.6172 32.2656 15.1914 32 14.8906C31.7344 14.5859 31.375 14.4336 30.9219 14.4336ZM43.5957 12.3945H40.8535V20H39.7344V12.3945H36.998V11.4688H43.5957V12.3945ZM47.3105 14.6328C47.1465 14.6055 46.9688 14.5918 46.7773 14.5918C46.0664 14.5918 45.584 14.8945 45.3301 15.5V20H44.2461V13.6602H45.3008L45.3184 14.3926C45.6738 13.8262 46.1777 13.543 46.8301 13.543C47.041 13.543 47.2012 13.5703 47.3105 13.625V14.6328ZM51.9922 20C51.9297 19.875 51.8789 19.6523 51.8398 19.332C51.3359 19.8555 50.7344 20.1172 50.0352 20.1172C49.4102 20.1172 48.8965 19.9414 48.4941 19.5898C48.0957 19.2344 47.8965 18.7852 47.8965 18.2422C47.8965 17.582 48.1465 17.0703 48.6465 16.707C49.1504 16.3398 49.8574 16.1562 50.7676 16.1562H51.8223V15.6582C51.8223 15.2793 51.709 14.9785 51.4824 14.7559C51.2559 14.5293 50.9219 14.416 50.4805 14.416C50.0938 14.416 49.7695 14.5137 49.5078 14.709C49.2461 14.9043 49.1152 15.1406 49.1152 15.418H48.0254C48.0254 15.1016 48.1367 14.7969 48.3594 14.5039C48.5859 14.207 48.8906 13.9727 49.2734 13.8008C49.6602 13.6289 50.084 13.543 50.5449 13.543C51.2754 13.543 51.8477 13.7266 52.2617 14.0938C52.6758 14.457 52.8906 14.959 52.9062 15.5996V18.5176C52.9062 19.0996 52.9805 19.5625 53.1289 19.9062V20H51.9922ZM50.1934 19.1738C50.5332 19.1738 50.8555 19.0859 51.1602 18.9102C51.4648 18.7344 51.6855 18.5059 51.8223 18.2246V16.9238H50.9727C49.6445 16.9238 48.9805 17.3125 48.9805 18.0898C48.9805 18.4297 49.0938 18.6953 49.3203 18.8867C49.5469 19.0781 49.8379 19.1738 50.1934 19.1738ZM54.3418 16.7773C54.3418 15.8047 54.5723 15.0234 55.0332 14.4336C55.4941 13.8398 56.0977 13.543 56.8438 13.543C57.5859 13.543 58.1738 13.7969 58.6074 14.3047V11H59.6914V20H58.6953L58.6426 19.3203C58.209 19.8516 57.6055 20.1172 56.832 20.1172C56.0977 20.1172 55.498 19.8164 55.0332 19.2148C54.5723 18.6133 54.3418 17.8281 54.3418 16.8594V16.7773ZM55.4258 16.9004C55.4258 17.6191 55.5742 18.1816 55.8711 18.5879C56.168 18.9941 56.5781 19.1973 57.1016 19.1973C57.7891 19.1973 58.291 18.8887 58.6074 18.2715V15.3594C58.2832 14.7617 57.7852 14.4629 57.1133 14.4629C56.582 14.4629 56.168 14.668 55.8711 15.0781C55.5742 15.4883 55.4258 16.0957 55.4258 16.9004ZM62.5566 20H61.4727V13.6602H62.5566V20ZM61.3848 11.9785C61.3848 11.8027 61.4375 11.6543 61.543 11.5332C61.6523 11.4121 61.8125 11.3516 62.0234 11.3516C62.2344 11.3516 62.3945 11.4121 62.5039 11.5332C62.6133 11.6543 62.668 11.8027 62.668 11.9785C62.668 12.1543 62.6133 12.3008 62.5039 12.418C62.3945 12.5352 62.2344 12.5938 62.0234 12.5938C61.8125 12.5938 61.6523 12.5352 61.543 12.418C61.4375 12.3008 61.3848 12.1543 61.3848 11.9785ZM65.3223 13.6602L65.3574 14.457C65.8418 13.8477 66.4746 13.543 67.2559 13.543C68.5957 13.543 69.2715 14.2988 69.2832 15.8105V20H68.1992V15.8047C68.1953 15.3477 68.0898 15.0098 67.8828 14.791C67.6797 14.5723 67.3613 14.4629 66.9277 14.4629C66.5762 14.4629 66.2676 14.5566 66.002 14.7441C65.7363 14.9316 65.5293 15.1777 65.3809 15.4824V20H64.2969V13.6602H65.3223ZM70.6602 16.7773C70.6602 15.7891 70.8887 15.0039 71.3457 14.4219C71.8027 13.8359 72.4082 13.543 73.1621 13.543C73.9355 13.543 74.5391 13.8164 74.9727 14.3633L75.0254 13.6602H76.0156V19.8477C76.0156 20.668 75.7715 21.3145 75.2832 21.7871C74.7988 22.2598 74.1465 22.4961 73.3262 22.4961C72.8691 22.4961 72.4219 22.3984 71.9844 22.2031C71.5469 22.0078 71.2129 21.7402 70.9824 21.4004L71.5449 20.75C72.0098 21.3242 72.5781 21.6113 73.25 21.6113C73.7773 21.6113 74.1875 21.4629 74.4805 21.166C74.7773 20.8691 74.9258 20.4512 74.9258 19.9121V19.3672C74.4922 19.8672 73.9004 20.1172 73.1504 20.1172C72.4082 20.1172 71.8066 19.8184 71.3457 19.2207C70.8887 18.623 70.6602 17.8086 70.6602 16.7773ZM71.75 16.9004C71.75 17.6152 71.8965 18.1777 72.1895 18.5879C72.4824 18.9941 72.8926 19.1973 73.4199 19.1973C74.1035 19.1973 74.6055 18.8867 74.9258 18.2656V15.3711C74.5938 14.7656 74.0957 14.4629 73.4316 14.4629C72.9043 14.4629 72.4922 14.668 72.1953 15.0781C71.8984 15.4883 71.75 16.0957 71.75 16.9004ZM83.9316 16.5488H81.9277V20H80.7969V11.4688H83.6211C84.582 11.4688 85.3203 11.6875 85.8359 12.125C86.3555 12.5625 86.6152 13.1992 86.6152 14.0352C86.6152 14.5664 86.4707 15.0293 86.1816 15.4238C85.8965 15.8184 85.498 16.1133 84.9863 16.3086L86.9902 19.9297V20H85.7832L83.9316 16.5488ZM81.9277 15.6289H83.6562C84.2148 15.6289 84.6582 15.4844 84.9863 15.1953C85.3184 14.9062 85.4844 14.5195 85.4844 14.0352C85.4844 13.5078 85.3262 13.1035 85.0098 12.8223C84.6973 12.541 84.2441 12.3984 83.6504 12.3945H81.9277V15.6289ZM87.7402 16.7715C87.7402 16.1504 87.8613 15.5918 88.1035 15.0957C88.3496 14.5996 88.6895 14.2168 89.123 13.9473C89.5605 13.6777 90.0586 13.543 90.6172 13.543C91.4805 13.543 92.1777 13.8418 92.709 14.4395C93.2441 15.0371 93.5117 15.832 93.5117 16.8242V16.9004C93.5117 17.5176 93.3926 18.0723 93.1543 18.5645C92.9199 19.0527 92.582 19.4336 92.1406 19.707C91.7031 19.9805 91.1992 20.1172 90.6289 20.1172C89.7695 20.1172 89.0723 19.8184 88.5371 19.2207C88.0059 18.623 87.7402 17.832 87.7402 16.8477V16.7715ZM88.8301 16.9004C88.8301 17.6035 88.9922 18.168 89.3164 18.5938C89.6445 19.0195 90.082 19.2324 90.6289 19.2324C91.1797 19.2324 91.6172 19.0176 91.9414 18.5879C92.2656 18.1543 92.4277 17.5488 92.4277 16.7715C92.4277 16.0762 92.2617 15.5137 91.9297 15.084C91.6016 14.6504 91.1641 14.4336 90.6172 14.4336C90.082 14.4336 89.6504 14.6465 89.3223 15.0723C88.9941 15.498 88.8301 16.1074 88.8301 16.9004ZM94.584 16.7715C94.584 16.1504 94.7051 15.5918 94.9473 15.0957C95.1934 14.5996 95.5332 14.2168 95.9668 13.9473C96.4043 13.6777 96.9023 13.543 97.4609 13.543C98.3242 13.543 99.0215 13.8418 99.5527 14.4395C100.088 15.0371 100.355 15.832 100.355 16.8242V16.9004C100.355 17.5176 100.236 18.0723 99.998 18.5645C99.7637 19.0527 99.4258 19.4336 98.9844 19.707C98.5469 19.9805 98.043 20.1172 97.4727 20.1172C96.6133 20.1172 95.916 19.8184 95.3809 19.2207C94.8496 18.623 94.584 17.832 94.584 16.8477V16.7715ZM95.6738 16.9004C95.6738 17.6035 95.8359 18.168 96.1602 18.5938C96.4883 19.0195 96.9258 19.2324 97.4727 19.2324C98.0234 19.2324 98.4609 19.0176 98.7852 18.5879C99.1094 18.1543 99.2715 17.5488 99.2715 16.7715C99.2715 16.0762 99.1055 15.5137 98.7734 15.084C98.4453 14.6504 98.0078 14.4336 97.4609 14.4336C96.9258 14.4336 96.4941 14.6465 96.166 15.0723C95.8379 15.498 95.6738 16.1074 95.6738 16.9004ZM102.734 13.6602L102.764 14.3633C103.229 13.8164 103.855 13.543 104.645 13.543C105.531 13.543 106.135 13.8828 106.455 14.5625C106.666 14.2578 106.939 14.0117 107.275 13.8242C107.615 13.6367 108.016 13.543 108.477 13.543C109.867 13.543 110.574 14.2793 110.598 15.752V20H109.514V15.8164C109.514 15.3633 109.41 15.0254 109.203 14.8027C108.996 14.5762 108.648 14.4629 108.16 14.4629C107.758 14.4629 107.424 14.584 107.158 14.8262C106.893 15.0645 106.738 15.3867 106.695 15.793V20H105.605V15.8457C105.605 14.9238 105.154 14.4629 104.252 14.4629C103.541 14.4629 103.055 14.7656 102.793 15.3711V20H101.709V13.6602H102.734Z"
                      fill="black"
                      fill-opacity="0.85"
                    />
                    <path
                      d="M121.078 15.9995L124.008 12.5073C124.057 12.4493 124.016 12.3611 123.94 12.3611H123.049C122.997 12.3611 122.946 12.3845 122.912 12.4247L120.495 15.3053L118.079 12.4247C118.046 12.3845 117.995 12.3611 117.942 12.3611H117.051C116.975 12.3611 116.934 12.4493 116.983 12.5073L119.913 15.9995L116.983 19.4917C116.972 19.5046 116.965 19.5204 116.963 19.5372C116.961 19.5541 116.963 19.5712 116.97 19.5866C116.978 19.602 116.989 19.615 117.003 19.6241C117.018 19.6332 117.034 19.638 117.051 19.6379H117.942C117.994 19.6379 118.045 19.6144 118.079 19.5743L120.495 16.6937L122.912 19.5743C122.945 19.6144 122.995 19.6379 123.049 19.6379H123.94C124.016 19.6379 124.057 19.5497 124.008 19.4917L121.078 15.9995Z"
                      fill="black"
                      fill-opacity="0.45"
                    />
                    <path
                      d="M6.5 5H127.5V3H6.5V5ZM128.5 6V26H130.5V6H128.5ZM127.5 27H6.5V29H127.5V27ZM5.5 26V6H3.5V26H5.5ZM6.5 27C5.94771 27 5.5 26.5523 5.5 26H3.5C3.5 27.6569 4.84314 29 6.5 29V27ZM128.5 26C128.5 26.5523 128.052 27 127.5 27V29C129.157 29 130.5 27.6569 130.5 26H128.5ZM127.5 5C128.052 5 128.5 5.44771 128.5 6H130.5C130.5 4.34315 129.157 3 127.5 3V5ZM6.5 3C4.84315 3 3.5 4.34314 3.5 6H5.5C5.5 5.44772 5.94772 5 6.5 5V3Z"
                      fill="#F0F0F0"
                    />
                    <path d="M133.5 6C133.5 4.89543 134.395 4 135.5 4H275.5C276.605 4 277.5 4.89543 277.5 6V26C277.5 27.1046 276.605 28 275.5 28H135.5C134.395 28 133.5 27.1046 133.5 26V6Z" fill="#F5F5F5" />
                    <path
                      d="M148.385 12.3945H145.643V20H144.523V12.3945H141.787V11.4688H148.385V12.3945ZM152.1 14.6328C151.936 14.6055 151.758 14.5918 151.566 14.5918C150.855 14.5918 150.373 14.8945 150.119 15.5V20H149.035V13.6602H150.09L150.107 14.3926C150.463 13.8262 150.967 13.543 151.619 13.543C151.83 13.543 151.99 13.5703 152.1 13.625V14.6328ZM156.781 20C156.719 19.875 156.668 19.6523 156.629 19.332C156.125 19.8555 155.523 20.1172 154.824 20.1172C154.199 20.1172 153.686 19.9414 153.283 19.5898C152.885 19.2344 152.686 18.7852 152.686 18.2422C152.686 17.582 152.936 17.0703 153.436 16.707C153.939 16.3398 154.646 16.1562 155.557 16.1562H156.611V15.6582C156.611 15.2793 156.498 14.9785 156.271 14.7559C156.045 14.5293 155.711 14.416 155.27 14.416C154.883 14.416 154.559 14.5137 154.297 14.709C154.035 14.9043 153.904 15.1406 153.904 15.418H152.814C152.814 15.1016 152.926 14.7969 153.148 14.5039C153.375 14.207 153.68 13.9727 154.062 13.8008C154.449 13.6289 154.873 13.543 155.334 13.543C156.064 13.543 156.637 13.7266 157.051 14.0938C157.465 14.457 157.68 14.959 157.695 15.5996V18.5176C157.695 19.0996 157.77 19.5625 157.918 19.9062V20H156.781ZM154.982 19.1738C155.322 19.1738 155.645 19.0859 155.949 18.9102C156.254 18.7344 156.475 18.5059 156.611 18.2246V16.9238H155.762C154.434 16.9238 153.77 17.3125 153.77 18.0898C153.77 18.4297 153.883 18.6953 154.109 18.8867C154.336 19.0781 154.627 19.1738 154.982 19.1738ZM159.131 16.7773C159.131 15.8047 159.361 15.0234 159.822 14.4336C160.283 13.8398 160.887 13.543 161.633 13.543C162.375 13.543 162.963 13.7969 163.396 14.3047V11H164.48V20H163.484L163.432 19.3203C162.998 19.8516 162.395 20.1172 161.621 20.1172C160.887 20.1172 160.287 19.8164 159.822 19.2148C159.361 18.6133 159.131 17.8281 159.131 16.8594V16.7773ZM160.215 16.9004C160.215 17.6191 160.363 18.1816 160.66 18.5879C160.957 18.9941 161.367 19.1973 161.891 19.1973C162.578 19.1973 163.08 18.8887 163.396 18.2715V15.3594C163.072 14.7617 162.574 14.4629 161.902 14.4629C161.371 14.4629 160.957 14.668 160.66 15.0781C160.363 15.4883 160.215 16.0957 160.215 16.9004ZM167.346 20H166.262V13.6602H167.346V20ZM166.174 11.9785C166.174 11.8027 166.227 11.6543 166.332 11.5332C166.441 11.4121 166.602 11.3516 166.812 11.3516C167.023 11.3516 167.184 11.4121 167.293 11.5332C167.402 11.6543 167.457 11.8027 167.457 11.9785C167.457 12.1543 167.402 12.3008 167.293 12.418C167.184 12.5352 167.023 12.5938 166.812 12.5938C166.602 12.5938 166.441 12.5352 166.332 12.418C166.227 12.3008 166.174 12.1543 166.174 11.9785ZM170.111 13.6602L170.146 14.457C170.631 13.8477 171.264 13.543 172.045 13.543C173.385 13.543 174.061 14.2988 174.072 15.8105V20H172.988V15.8047C172.984 15.3477 172.879 15.0098 172.672 14.791C172.469 14.5723 172.15 14.4629 171.717 14.4629C171.365 14.4629 171.057 14.5566 170.791 14.7441C170.525 14.9316 170.318 15.1777 170.17 15.4824V20H169.086V13.6602H170.111ZM175.449 16.7773C175.449 15.7891 175.678 15.0039 176.135 14.4219C176.592 13.8359 177.197 13.543 177.951 13.543C178.725 13.543 179.328 13.8164 179.762 14.3633L179.814 13.6602H180.805V19.8477C180.805 20.668 180.561 21.3145 180.072 21.7871C179.588 22.2598 178.936 22.4961 178.115 22.4961C177.658 22.4961 177.211 22.3984 176.773 22.2031C176.336 22.0078 176.002 21.7402 175.771 21.4004L176.334 20.75C176.799 21.3242 177.367 21.6113 178.039 21.6113C178.566 21.6113 178.977 21.4629 179.27 21.166C179.566 20.8691 179.715 20.4512 179.715 19.9121V19.3672C179.281 19.8672 178.689 20.1172 177.939 20.1172C177.197 20.1172 176.596 19.8184 176.135 19.2207C175.678 18.623 175.449 17.8086 175.449 16.7773ZM176.539 16.9004C176.539 17.6152 176.686 18.1777 176.979 18.5879C177.271 18.9941 177.682 19.1973 178.209 19.1973C178.893 19.1973 179.395 18.8867 179.715 18.2656V15.3711C179.383 14.7656 178.885 14.4629 178.221 14.4629C177.693 14.4629 177.281 14.668 176.984 15.0781C176.688 15.4883 176.539 16.0957 176.539 16.9004ZM188.105 16.1973C187.141 15.9199 186.438 15.5801 185.996 15.1777C185.559 14.7715 185.34 14.2715 185.34 13.6777C185.34 13.0059 185.607 12.4512 186.143 12.0137C186.682 11.5723 187.381 11.3516 188.24 11.3516C188.826 11.3516 189.348 11.4648 189.805 11.6914C190.266 11.918 190.621 12.2305 190.871 12.6289C191.125 13.0273 191.252 13.4629 191.252 13.9355H190.121C190.121 13.4199 189.957 13.0156 189.629 12.7227C189.301 12.4258 188.838 12.2773 188.24 12.2773C187.686 12.2773 187.252 12.4004 186.939 12.6465C186.631 12.8887 186.477 13.2266 186.477 13.6602C186.477 14.0078 186.623 14.3027 186.916 14.5449C187.213 14.7832 187.715 15.002 188.422 15.2012C189.133 15.4004 189.688 15.6211 190.086 15.8633C190.488 16.1016 190.785 16.3809 190.977 16.7012C191.172 17.0215 191.27 17.3984 191.27 17.832C191.27 18.5234 191 19.0781 190.461 19.4961C189.922 19.9102 189.201 20.1172 188.299 20.1172C187.713 20.1172 187.166 20.0059 186.658 19.7832C186.15 19.5566 185.758 19.248 185.48 18.8574C185.207 18.4668 185.07 18.0234 185.07 17.5273H186.201C186.201 18.043 186.391 18.4512 186.77 18.752C187.152 19.0488 187.662 19.1973 188.299 19.1973C188.893 19.1973 189.348 19.0762 189.664 18.834C189.98 18.5918 190.139 18.2617 190.139 17.8438C190.139 17.4258 189.992 17.1035 189.699 16.877C189.406 16.6465 188.875 16.4199 188.105 16.1973ZM196.461 19.373C196.039 19.8691 195.42 20.1172 194.604 20.1172C193.928 20.1172 193.412 19.9219 193.057 19.5312C192.705 19.1367 192.527 18.5547 192.523 17.7852V13.6602H193.607V17.7559C193.607 18.7168 193.998 19.1973 194.779 19.1973C195.607 19.1973 196.158 18.8887 196.432 18.2715V13.6602H197.516V20H196.484L196.461 19.373ZM200.188 13.6602L200.217 14.3633C200.682 13.8164 201.309 13.543 202.098 13.543C202.984 13.543 203.588 13.8828 203.908 14.5625C204.119 14.2578 204.393 14.0117 204.729 13.8242C205.068 13.6367 205.469 13.543 205.93 13.543C207.32 13.543 208.027 14.2793 208.051 15.752V20H206.967V15.8164C206.967 15.3633 206.863 15.0254 206.656 14.8027C206.449 14.5762 206.102 14.4629 205.613 14.4629C205.211 14.4629 204.877 14.584 204.611 14.8262C204.346 15.0645 204.191 15.3867 204.148 15.793V20H203.059V15.8457C203.059 14.9238 202.607 14.4629 201.705 14.4629C200.994 14.4629 200.508 14.7656 200.246 15.3711V20H199.162V13.6602H200.188ZM210.711 13.6602L210.74 14.3633C211.205 13.8164 211.832 13.543 212.621 13.543C213.508 13.543 214.111 13.8828 214.432 14.5625C214.643 14.2578 214.916 14.0117 215.252 13.8242C215.592 13.6367 215.992 13.543 216.453 13.543C217.844 13.543 218.551 14.2793 218.574 15.752V20H217.49V15.8164C217.49 15.3633 217.387 15.0254 217.18 14.8027C216.973 14.5762 216.625 14.4629 216.137 14.4629C215.734 14.4629 215.4 14.584 215.135 14.8262C214.869 15.0645 214.715 15.3867 214.672 15.793V20H213.582V15.8457C213.582 14.9238 213.131 14.4629 212.229 14.4629C211.518 14.4629 211.031 14.7656 210.77 15.3711V20H209.686V13.6602H210.711ZM224.129 20C224.066 19.875 224.016 19.6523 223.977 19.332C223.473 19.8555 222.871 20.1172 222.172 20.1172C221.547 20.1172 221.033 19.9414 220.631 19.5898C220.232 19.2344 220.033 18.7852 220.033 18.2422C220.033 17.582 220.283 17.0703 220.783 16.707C221.287 16.3398 221.994 16.1562 222.904 16.1562H223.959V15.6582C223.959 15.2793 223.846 14.9785 223.619 14.7559C223.393 14.5293 223.059 14.416 222.617 14.416C222.23 14.416 221.906 14.5137 221.645 14.709C221.383 14.9043 221.252 15.1406 221.252 15.418H220.162C220.162 15.1016 220.273 14.7969 220.496 14.5039C220.723 14.207 221.027 13.9727 221.41 13.8008C221.797 13.6289 222.221 13.543 222.682 13.543C223.412 13.543 223.984 13.7266 224.398 14.0938C224.812 14.457 225.027 14.959 225.043 15.5996V18.5176C225.043 19.0996 225.117 19.5625 225.266 19.9062V20H224.129ZM222.33 19.1738C222.67 19.1738 222.992 19.0859 223.297 18.9102C223.602 18.7344 223.822 18.5059 223.959 18.2246V16.9238H223.109C221.781 16.9238 221.117 17.3125 221.117 18.0898C221.117 18.4297 221.23 18.6953 221.457 18.8867C221.684 19.0781 221.975 19.1738 222.33 19.1738ZM229.807 14.6328C229.643 14.6055 229.465 14.5918 229.273 14.5918C228.562 14.5918 228.08 14.8945 227.826 15.5V20H226.742V13.6602H227.797L227.814 14.3926C228.17 13.8262 228.674 13.543 229.326 13.543C229.537 13.543 229.697 13.5703 229.807 13.625V14.6328ZM232.988 18.4121L234.465 13.6602H235.625L233.076 20.9785C232.682 22.0332 232.055 22.5605 231.195 22.5605L230.99 22.543L230.586 22.4668V21.5879L230.879 21.6113C231.246 21.6113 231.531 21.5371 231.734 21.3887C231.941 21.2402 232.111 20.9688 232.244 20.5742L232.484 19.9297L230.223 13.6602H231.406L232.988 18.4121ZM243.025 20H241.936V12.7754L239.75 13.5781V12.5938L242.855 11.4277H243.025V20ZM251.551 16.3613C251.551 17.6309 251.334 18.5742 250.9 19.1914C250.467 19.8086 249.789 20.1172 248.867 20.1172C247.957 20.1172 247.283 19.8164 246.846 19.2148C246.408 18.6094 246.182 17.707 246.166 16.5078V15.0605C246.166 13.8066 246.383 12.875 246.816 12.2656C247.25 11.6562 247.93 11.3516 248.855 11.3516C249.773 11.3516 250.449 11.6465 250.883 12.2363C251.316 12.8223 251.539 13.7285 251.551 14.9551V16.3613ZM250.467 14.8789C250.467 13.9609 250.338 13.293 250.08 12.875C249.822 12.4531 249.414 12.2422 248.855 12.2422C248.301 12.2422 247.896 12.4512 247.643 12.8691C247.389 13.2871 247.258 13.9297 247.25 14.7969V16.5312C247.25 17.4531 247.383 18.1348 247.648 18.5762C247.918 19.0137 248.324 19.2324 248.867 19.2324C249.402 19.2324 249.799 19.0254 250.057 18.6113C250.318 18.1973 250.455 17.5449 250.467 16.6543V14.8789ZM256.502 20H255.412V12.7754L253.227 13.5781V12.5938L256.332 11.4277H256.502V20Z"
                      fill="black"
                      fill-opacity="0.85"
                    />
                    <path
                      d="M269.078 15.9995L272.008 12.5073C272.057 12.4493 272.016 12.3611 271.94 12.3611H271.049C270.997 12.3611 270.946 12.3845 270.912 12.4247L268.495 15.3053L266.079 12.4247C266.046 12.3845 265.995 12.3611 265.942 12.3611H265.051C264.975 12.3611 264.934 12.4493 264.983 12.5073L267.913 15.9995L264.983 19.4917C264.972 19.5046 264.965 19.5204 264.963 19.5372C264.961 19.5541 264.963 19.5712 264.97 19.5866C264.978 19.602 264.989 19.615 265.003 19.6241C265.018 19.6332 265.034 19.638 265.051 19.6379H265.942C265.994 19.6379 266.045 19.6144 266.079 19.5743L268.495 16.6937L270.912 19.5743C270.945 19.6144 270.995 19.6379 271.049 19.6379H271.94C272.016 19.6379 272.057 19.5497 272.008 19.4917L269.078 15.9995Z"
                      fill="black"
                      fill-opacity="0.45"
                    />
                    <path
                      d="M135.5 5H275.5V3H135.5V5ZM276.5 6V26H278.5V6H276.5ZM275.5 27H135.5V29H275.5V27ZM134.5 26V6H132.5V26H134.5ZM135.5 27C134.948 27 134.5 26.5523 134.5 26H132.5C132.5 27.6569 133.843 29 135.5 29V27ZM276.5 26C276.5 26.5523 276.052 27 275.5 27V29C277.157 29 278.5 27.6569 278.5 26H276.5ZM275.5 5C276.052 5 276.5 5.44772 276.5 6H278.5C278.5 4.34315 277.157 3 275.5 3V5ZM135.5 3C133.843 3 132.5 4.34314 132.5 6H134.5C134.5 5.44772 134.948 5 135.5 5V3Z"
                      fill="#F0F0F0"
                    />
                    <path
                      d="M2.5 1H279.5V-1H2.5V1ZM280.5 2V30H282.5V2H280.5ZM279.5 31H2.5V33H279.5V31ZM1.5 30V2H-0.5V30H1.5ZM2.5 31C1.94772 31 1.5 30.5523 1.5 30H-0.5C-0.5 31.6569 0.843152 33 2.5 33V31ZM280.5 30C280.5 30.5523 280.052 31 279.5 31V33C281.157 33 282.5 31.6569 282.5 30H280.5ZM279.5 1C280.052 1 280.5 1.44772 280.5 2H282.5C282.5 0.343143 281.157 -1 279.5 -1V1ZM2.5 -1C0.843146 -1 -0.5 0.343146 -0.5 2H1.5C1.5 1.44772 1.94772 1 2.5 1V-1Z"
                      fill="#D9D9D9"
                    />
                  </svg>
                }
                amount="150 JOD"
              /> */
}
